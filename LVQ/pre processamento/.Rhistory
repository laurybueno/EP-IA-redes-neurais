# Script para pegar o banco de dados do optdigits.tes e gerar um gráfico a fim de
# saber se existe ou não outlier
# Isso foi feito para saber se devemos normalizar usando a tecnica min-max (sem outlier)
#ou usando a tecnica z-score (tendo outlier)
#abre o arquivo e salva na variavel BDtreinamento.
#sep="," pois os atributos sao separados por "," e nao tem cabecalho, por isso header=F
BDtreinamento = read.csv("http://archive.ics.uci.edu/ml/machine-learning-databases/optdigits/optdigits.tes", sep=',' , header=F)
outlier(BDtreinamento, opposite = FALSE, logical = TRUE)
install.packages("outliers")
outlier(BDtreinamento, opposite = FALSE, logical = TRUE)
library(outliers)
outlier(BDtreinamento, opposite = FALSE, logical = TRUE)
# Script para normalizar usando a tecnica z-score
BDtreinamento = read.csv("http://archive.ics.uci.edu/ml/machine-learning-databases/optdigits/optdigits.tes", sep=',' , header=F)
normalizado = scale(BDtreinamento)
## na primeira coluna, ficou NaN pois todos os elemtnos dela sao 0 (entao foi dividido por 0)
#deleta colunas onde tem algum elemento NaN
final = normalizado[,colSums (is.na(normalizado)) != nrow(normalizado)]
#salva a matriz normalizada em um arquivo
write.table(final, file="optdigitsNormalizado.txt",sep="," ,row.names=FALSE, col.names=FALSE)
single.dataSet <- hclust(dist(final), method="single")
plot(single.dataSet, hang=-1)
# Script para normalizar usando a tecnica z-score
BDtreinamento = read.csv("http://archive.ics.uci.edu/ml/machine-learning-databases/optdigits/optdigits.tes", sep=',' , header=F)
normalizado = scale(BDtreinamento)
## na primeira coluna, ficou NaN pois todos os elemtnos dela sao 0 (entao foi dividido por 0)
#deleta colunas onde tem algum elemento NaN
final = normalizado[,colSums (is.na(normalizado)) != nrow(normalizado)]
#salva a matriz normalizada em um arquivo
write.table(final, file="optdigitsNormalizado.txt",sep="," ,row.names=FALSE, col.names=FALSE)
